from datetime import datetime, timedeltafrom random import randintfrom typing import Dict# from charset_normalizer.md import Listfrom fastapi import status, APIRouter, HTTPException, Depends, Requestfrom fastapi.responses import JSONResponsefrom fastapi_jwt_auth import AuthJWTfrom fastapi_jwt_auth.exceptions import *from pydantic import BaseModelfrom sqlalchemy.ext.asyncio import AsyncSessionfrom sqlalchemy.orm import Session# from ../..core.schemas import schemafrom project.core.schemas import schema# fromfrom project.core.security.hasher import get_password_hash, verify_passwordfrom project.core.security.validate_email import is_valid_email_regexfrom project.core.utils.sender import send_otp_codefrom project.models.dependencies import get_dbfrom project.models.accounts_client.models import User, OtpCode, Profile# from project.models.accounts_client.database import UserModel, OtpModel, ProfileModelrouter = APIRouter()#class Settings(BaseModel):    authjwt_secret_key: str = "AAAAAAAAAAAAAAAAAAAAAAAAA"    # Secret Key Json Web Token    # :)    authjwt_token_location = ("headers",)    authjwt_cookie_secure = False    authjwt_algorithm = "HS256"    access_expires: int = timedelta(minutes=1440)    refresh_expires: int = timedelta(days=30)@AuthJWT.load_configdef get_config():    return Settings()# @router.post('/register/phone/')# def validate_register_phone(data: schema.UserBase, db: Session = Depends(get_db)):##     """#     Validates a phone number and sends an OTP code if the phone number is not already registered.#     """#     user: UserModel = UserModel(db)#     otp: OtpModel = OtpModel(db)#     phone_number = data.phone_number#     user.validate_user(phone_number)#     otp.validate_otp(phone_number)#     otp.false_otp_if_available(phone_number)#     otp.create_otp(phone_number)#     otp.send_otp()#     # super(phone_number,db)#     return JSONResponse('We     send opt code for your phone number', status_code=status.HTTP_201_CREATED)# -----------------------------------------# @router.post('/register/code/', status_code=status.HTTP_201_CREATED)# async def register_for_token(data: schema.UserData, db: Session = Depends(get_db), Authorize: AuthJWT = Depends()):#     """##     """#     user: UserModel = UserModel(db)#     otp: OtpModel = OtpModel(db)#     profile: ProfileModel = ProfileModel(db)#     phone_number = data.phone_number#     otp.validate_otp_after_send(phone_number=phone_number, code=data.code)#     await user.create_user(phone_number)#     await profile.create_profile(phone_number)#     access_token = Authorize.create_access_token(subject=phone_number)#     refresh_token = Authorize.create_refresh_token(subject=phone_number)#     return {"access_token": access_token, "refresh_token": refresh_token}@router.post('/login/phone/', status_code=status.HTTP_200_OK)def login_token(data: schema.OtpCode, db: AsyncSession = Depends(get_db)):    user_exist = db.query(User).filter(User.phone_number == data.phone_number).first()    if user_exist is None:        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="This phone number not found")    last_otp_time = db.query(OtpCode).filter(OtpCode.phone_number == data.phone_number).order_by(        OtpCode.id.desc()).first()    # 37895    if last_otp_time and (last_otp_time.time + timedelta(minutes=2)) > datetime.now():        raise HTTPException(status_code=status.HTTP_429_TOO_MANY_REQUESTS,                            detail='Please wait for 2 minutes before requesting a new OTP')    otpCode = OtpCode(code=randint(10000, 99999), phone_number=data.phone_number)    db.add(otpCode)    db.commit()    db.refresh(otpCode)    send_otp_code(otpCode, data.phone_number)    return JSONResponse("We send opt code for your phone number code : {otpCode}", status_code=status.HTTP_201_CREATED)@router.post('/login/code/', status_code=status.HTTP_200_OK)def login_token(data: schema.UserData, db: Session = Depends(get_db), Authorize: AuthJWT = Depends()):    user_exist = db.query(User).filter(User.phone_number == data.phone_number).first()    if user_exist is None:        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="This phone number not found")    code_valid = db.query(OtpCode).filter(OtpCode.code == data.code).first()    if code_valid and (code_valid.time + timedelta(minutes=2)) < datetime.now():        code_valid.expired = False        db.commit()        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,                            detail='The verification code has expired or invalid')    access_token = Authorize.create_access_token(subject=data.phone_number)    refresh_token = Authorize.create_refresh_token(subject=data.phone_number)    return {"access_token": access_token, "refresh_token": refresh_token}@router.post("/login/password/", status_code=status.HTTP_200_OK)def login_password(data: schema.LoginPassword, Authorize: AuthJWT = Depends(), db: Session = Depends(get_db)):    password = data.password    phone_number = data.phone_number    user = db.query(User).filter(User.phone_number == phone_number).first()    verifyPassword = verify_password(password, user.password)    if verifyPassword is False:        return "password invalid"    refresh_token = Authorize.create_refresh_token(subject=phone_number)    access_token = Authorize.create_access_token(subject=phone_number)    return {"access_token": access_token, 'refresh_token': refresh_token}@router.post('/set/password/', status_code=status.HTTP_200_OK)def set_password(data: schema.UserCreate, Authorize: AuthJWT = Depends(), db: Session = Depends(get_db)):    try:        phone_number = Authorize.get_jwt_subject()        user = db.query(User).filter(User.phone_number == phone_number).first()        Authorize.jwt_required()        hash_password = get_password_hash(data.password)        user.password = hash_password        db.commit()        db.refresh(user)        return {"password": data.password, 'user': user}    except JWTDecodeError:        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='Json Web Token invalid')    except MissingTokenError:        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='You be most have json web token')    except AuthJWTException:        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='Auth JWT Exception')@router.put('/update/password/', status_code=status.HTTP_200_OK)def update_password(data: schema.PasswordUpdate, Authorize: AuthJWT = Depends(), db: Session = Depends(get_db)):    try:        Authorize.jwt_required()        phone_number = Authorize.get_jwt_subject()        user = db.query(User).filter(User.phone_number == phone_number).first()        old_password = data.password        verifyPassword = verify_password(old_password, user.password)        if verifyPassword:            user.password = get_password_hash(data.new_password)            db.commit()            db.refresh(user)            return JSONResponse("Password update", status_code=status.HTTP_200_OK)        raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail='Password be most mach')    except JWTDecodeError:        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='Json Web Token invalid')    except MissingTokenError:        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='You be most have json web token')    except AuthJWTException:        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='Auth JWT Exception')@router.put('/update/profile/', status_code=status.HTTP_200_OK)def update_profile(data: schema.Profile | None = None, Authorize: AuthJWT = Depends(), db: Session = Depends(get_db)):    try:        Authorize.jwt_required()        phone_number = Authorize.get_jwt_subject()        profile = db.query(Profile).filter(Profile.phone_number == phone_number).first()        if profile is None:            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail='Profile not found')        if data:            profile.first_name = data.first_name            profile.last_name = data.last_name            if is_valid_email_regex(data.email) and data.email is not None:                profile.email = data.email            else:                raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail='Invalid email address')        db.commit()        db.refresh(profile)        return JSONResponse("Change in profile successfully saved", status_code=status.HTTP_200_OK)    except JWTDecodeError:        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='Json Web Token invalid')    except MissingTokenError:        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='Json Web Token not found ')@router.get("/show/profile/", status_code=status.HTTP_200_OK)async def show_profile(Authorize: AuthJWT = Depends(), db: Session = Depends(get_db)):    try:        Authorize.jwt_required()        phone_number = Authorize.get_jwt_subject()        profile = db.query(Profile).filter(Profile.phone_number == phone_number).first()        if profile is None:            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail='This profile not found')        return JSONResponse(profile, status_code=status.HTTP_200_OK)    except JWTDecodeError:        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,                            detail='Json Web Token invalid')    except MissingTokenError:        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,                            detail='You be most have json web token')    except AuthJWTException:        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,                            detail='Auth JWT Exception')@router.get("/show/user/")async def show_user(data: Dict, Authorize: AuthJWT = Depends(), db: Session = Depends(get_db)):    try:        Authorize.jwt_required()        user = db.query(User).filter(str(User.phone_number) == data["phone_number"]).first()        if user is None:            return False        return True    except JWTDecodeError:        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,                            detail='Json Web Token invalid')    except MissingTokenError:        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,                            detail='You be most have json web token')    except AuthJWTException:        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,                            detail='Auth JWT Exception')@router.options("/admin/show/all/user/")async def show_users(request: Request, Authorize: AuthJWT = Depends(), db: Session = Depends(get_db)):    try:        Authorize.jwt_required()        users = db.query(User).all()        return users    except MissingTokenError:        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='Json Web Token not found')    except JWTDecodeError:        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail='Json Web Token invalid')# @router.post("/a/a/")# def show_all_user(data: Dict, db: Session = Depends(get_db)):#     repo: UserModel = UserModel(db)#     result = repo.create_user(phone_number=data['phone_number'])#     return result@router.post("/a/")def reprocess_pill():    return JSONResponse("OK", status_code=status.HTTP_200_OK)@router.get("/b/")def reprocess_pill():    return JSONResponse("OK", status_code=status.HTTP_200_OK)